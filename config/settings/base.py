"""
Django settings for config project.

Generated by 'django-admin startproject' using Django 5.2.6.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

import os
from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent.parent

# .env 파일 로드 (안전하게 처리)
try:
    from dotenv import load_dotenv
    env_path = BASE_DIR / '.env'
    if env_path.exists():
        load_dotenv(env_path, encoding='utf-8')
except (ImportError, UnicodeDecodeError) as e:
    # dotenv가 없거나 인코딩 오류 시 환경변수만 사용
    print(f"Warning: Could not load .env file: {e}")
    pass


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-wrbo2a^s+@pdkacjiv@c)*&dwu(go=!4^&ib1p-udl$cvkep-h'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    'daphne',
    'common.apps.CommonConfig',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'pybo.apps.PyboConfig',
    'channels',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'common.middleware.SecurityMiddleware',  # 보안 미들웨어
    'common.middleware.RequestLoggingMiddleware',  # 요청 로깅 미들웨어
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'config.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'templates'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                'common.context_processors.theme_context',
            ],
        },
    },
]

WSGI_APPLICATION = 'config.wsgi.application'

# Channels 설정
ASGI_APPLICATION = 'config.asgi.application'

# CHANNEL_LAYERS - WebSocket 통신용
# 개발: InMemory (단일 프로세스)
# 프로덕션: Redis 권장 (멀티 프로세스 지원)
CHANNEL_LAYERS = {
    'default': {
        'BACKEND': 'channels.layers.InMemoryChannelLayer'
        # 프로덕션 환경에서는 아래 Redis 설정 사용 권장:
        # 'BACKEND': 'channels_redis.core.RedisChannelLayer',
        # 'CONFIG': {'hosts': [('127.0.0.1', 6379)]},
    }
}


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'ko-kr'

TIME_ZONE = 'Asia/Seoul'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

# 정적 파일 설정 - 성능 및 보안 최적화
STATIC_URL = '/static/'
STATICFILES_DIRS = [
    BASE_DIR / 'static',
]
STATIC_ROOT = BASE_DIR / 'staticfiles'

# 정적 파일 파인더 설정 (성능 향상)
STATICFILES_FINDERS = [
    'django.contrib.staticfiles.finders.FileSystemFinder',
    'django.contrib.staticfiles.finders.AppDirectoriesFinder',
]

# 미디어 파일 설정 (사용자 업로드)
MEDIA_URL = '/media/'
MEDIA_ROOT = BASE_DIR / 'media'

# 파일 업로드 제한 설정 (20MB)
FILE_UPLOAD_MAX_MEMORY_SIZE = 20 * 1024 * 1024  # 20MB
DATA_UPLOAD_MAX_MEMORY_SIZE = 20 * 1024 * 1024  # 20MB

# 이미지 업로드 보안 설정
FILE_UPLOAD_PERMISSIONS = 0o644
DIRECTORY_PERMISSIONS = 0o755

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# 로그인 관련 URL 설정
LOGIN_URL = '/common/login/'  # 비로그인 사용자가 @login_required 접근 시 이동할 URL
LOGIN_REDIRECT_URL = '/'  # 로그인 성공 후 이동하는 URL
LOGOUT_REDIRECT_URL = '/'  # 로그아웃 후 이동하는 URL

ALLOWED_HOSTS = ['43.203.93.244', 'tc.o-r.kr']

# OpenAI API 설정
OPENAI_API_KEY = os.environ.get('OPENAI_API_KEY', '')

# 카카오 로그인 API 설정
KAKAO_REST_API_KEY = os.environ.get('KAKAO_REST_API_KEY', '')
KAKAO_CLIENT_SECRET = os.environ.get('KAKAO_CLIENT_SECRET', '')

# 끝말잇기 게임 설정
WORDCHAIN_TIMEOUT = int(os.environ.get('WORDCHAIN_TIMEOUT', 30))  # 기본 30초
WORDCHAIN_USE_DICTIONARY_API = os.environ.get('WORDCHAIN_USE_DICTIONARY_API', 'True').lower() == 'true'
KOREAN_DICT_API_KEY = os.environ.get('KOREAN_DICT_API_KEY', '')  # 국립국어원 한국어기초사전 API 키

# 보안 미들웨어 설정 (환경변수로 조정 가능)
RATE_LIMIT_REQUESTS = int(os.environ.get('RATE_LIMIT_REQUESTS', 300))  # 시간당 요청 제한
RATE_LIMIT_WINDOW = int(os.environ.get('RATE_LIMIT_WINDOW', 3600))   # 1시간 윈도우
DDOS_THRESHOLD = int(os.environ.get('DDOS_THRESHOLD', 120))        # 1분에 120회 초과시 의심
BLOCK_DURATION = int(os.environ.get('BLOCK_DURATION', 180))       # 3분간 차단
SUSPICION_SCORE_THRESHOLD = int(os.environ.get('SUSPICION_SCORE_THRESHOLD', 20))
PROTECTED_PATH_ATTEMPTS_LIMIT = int(os.environ.get('PROTECTED_PATH_ATTEMPTS_LIMIT', 50))

def _split_patterns(raw_value):
    return [pattern.strip() for pattern in raw_value.split(',') if pattern.strip()]

SUSPICIOUS_USER_AGENT_PATTERNS = _split_patterns(
    os.environ.get('SUSPICIOUS_USER_AGENT_PATTERNS', 'bot,crawler,spider,scraper')
)
TRUSTED_USER_AGENT_PATTERNS = _split_patterns(
    os.environ.get('TRUSTED_USER_AGENT_PATTERNS', 'curl,python-requests,wget,uptimerobot')
)
TRUSTED_HEALTHCHECK_PATHS = _split_patterns(
    os.environ.get('TRUSTED_HEALTHCHECK_PATHS', '/health,/status')
)

# 캐시 설정 (메모리 기반 - 간단한 설정)
CACHES = {
    'default': {
        'BACKEND': 'django.core.cache.backends.locmem.LocMemCache',
        'LOCATION': 'unique-snowflake',
        'TIMEOUT': 300,
        'OPTIONS': {
            'MAX_ENTRIES': 1000,
        }
    }
}

# 로깅 설정 (안전한 버전)
import os

# 로그 디렉토리가 없으면 생성
LOGS_DIR = BASE_DIR / 'logs'
if not LOGS_DIR.exists():
    LOGS_DIR.mkdir(exist_ok=True)

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {
            'format': '{levelname} {asctime} {module} {message}',
            'style': '{',
        },
        'simple': {
            'format': '{levelname} {message}',
            'style': '{',
        },
    },
    'handlers': {
        'console': {
            'level': 'INFO',
            'class': 'logging.StreamHandler',
            'formatter': 'simple',
        },
        'security_file': {
            'level': 'WARNING',
            'class': 'logging.handlers.RotatingFileHandler',
            'filename': LOGS_DIR / 'security.log',
            'maxBytes': 1024*1024*5,  # 5MB
            'backupCount': 3,
            'formatter': 'verbose',
        },
    },
    'root': {
        'handlers': ['console'],
        'level': 'INFO',
    },
    'loggers': {
        'django': {
            'handlers': ['console'],
            'level': 'INFO',
            'propagate': False,
        },
        'security': {
            'handlers': ['security_file', 'console'],
            'level': 'WARNING',
            'propagate': False,
        },
    },
}

# 이메일 설정 (개발용)
EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'
DEFAULT_FROM_EMAIL = 'noreply@techchang.kr'

# 추가 보안 설정
SECURE_BROWSER_XSS_FILTER = True
SECURE_CONTENT_TYPE_NOSNIFF = True
X_FRAME_OPTIONS = 'DENY'

# (중복 설정 제거됨)